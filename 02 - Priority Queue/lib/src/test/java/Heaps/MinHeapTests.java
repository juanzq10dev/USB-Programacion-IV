/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Heaps;

import Person.Person;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;


import java.util.Arrays;

import org.junit.jupiter.api.Test;

public class MinHeapTests {
    @Test
    public void sort_LongArray_ArraySorted() {
        MinHeap<Long> heap = new MinHeap<Long>(new Long[] {9L, 10L, 7L, 8L, 5L, 6L, 3L, 4L, 1L, 2L, 0L});
        Long[] result = heap.getArray();
        Long[] expected = {0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L};
        assertArrayEquals(expected, result);
    }

    @Test
    public void sort_StringArray_ArraySorted() {
        MinHeap<String> heap = new MinHeap<String>(new String[] {"k", "j", "a", "d", "b", "f", "c", "e", "g", "h"});
        String[] result = heap.getArray();
        String[] expected = {"a", "b", "c", "d", "e", "f", "g", "h", "j", "k"};
        assertArrayEquals(expected, result);
    }

    @Test
    public void sort_PersonArray_ArraySorted() {
        Person[] array = {
            new Person("b", "2000-01-01", "7"),
            new Person("c", "2000-01-01", "3"),
            new Person("d", "2000-01-01", "9"),
            new Person("e", "2000-01-01", "5"),
            new Person("f", "2000-01-01", "6"),
            new Person("g", "2000-01-01", "2"),
            new Person("h", "2000-01-01", "8"),
            new Person("i", "2000-01-01", "4"),
            new Person("j", "2000-01-01", "1")
        };
        MinHeap<Person> heap = new MinHeap<Person>(array);
        
        Person[] expected = {
            new Person("j", "2000-01-01", "1"),
            new Person("g", "2000-01-01", "2"),
            new Person("c", "2000-01-01", "3"),
            new Person("i", "2000-01-01", "4"),
            new Person("e", "2000-01-01", "5"),
            new Person("f", "2000-01-01", "6"),
            new Person("b", "2000-01-01", "7"),
            new Person("h", "2000-01-01", "8"),
            new Person("d", "2000-01-01", "9"),
        };
        Person[] result = heap.getArray();

        assertArrayEquals(expected, result);
    }


    @Test
    public void add_InsertingElementAtTheBeginning_arraySorted() {
        MinHeap<Long> heap = new MinHeap<Long>(new Long[] {1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L});
        heap.add(0L);

        Long[] result = heap.getArray();
        result = Arrays.stream(result).filter(x -> x != null).toArray(Long[]::new);
        Long[] expected = {0L, 1L, 3L, 4L, 2L, 6L, 7L, 8L, 9L, 10L, 5L};

        assertArrayEquals(expected, result);
    }

    @Test
    public void removeRoot_removingRoot_RemovesRootAndReorderTheArray() {
        MinHeap<Long> heap = new MinHeap<>(new Long[] {1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L});

        Long actualRoot = heap.removeRoot();
        Long expectedRoot = 1L;
        Long[] result = heap.getArray();
        result = Arrays.stream(result).filter(x -> x != null).toArray(Long[]::new);
        Long[] expected = {2L, 4L, 3L, 8L, 5L, 6L, 7L, 10L, 9L};

        assertEquals(expectedRoot, actualRoot);
        assertArrayEquals(expected, result);
    }

    @Test
    public void removeRoot_removingRootFromEmptyHeap_ReturnsNull() {
        MinHeap<Long> heap = new MinHeap<>(new Long[] {});

        Long actualRoot = heap.removeRoot();
        Long expectedRoot = null;

        assertEquals(expectedRoot, actualRoot);
    }

    @Test
    public void peek_peekingRoot_ReturnsRoot() {
        MinHeap<Long> heap = new MinHeap<>(new Long[] {1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L});

        Long actualRoot = heap.peek();
        Long expectedRoot = 1L;
        Long[] result = heap.getArray();
        result = Arrays.stream(result).filter(x -> x != null).toArray(Long[]::new);
        Long[] expected = {1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L};

        assertEquals(expectedRoot, actualRoot);
        assertArrayEquals(expected, result);
    }

    @Test
    public void peek_peekingRootFromEmptyHeap_ReturnsNull() {
        MinHeap<Long> heap = new MinHeap<>(new Long[] {});

        Long actualRoot = heap.peek();
        Long expectedRoot = null;

        assertEquals(expectedRoot, actualRoot);
    }
}
