/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Heaps;

import java.util.Arrays;

public class Heap<T extends Comparable<T>> {
    private T[] array;
    private int size;

    public Heap() {
        this.array = (T[]) new Comparable[10];
        this.size = 0;
    }

    public Heap(T[] array) {
        this.array = array;
        this.size = array.length;
        sort();
    }

    public void insert(T value) {
        if (size == array.length) {
            resize();
        }
        size++;
        array[size - 1] = value;
        heapifyUp(size - 1);
    }

    public void heapifyUp(int index) {
        if (index == 0) {
            return;
        }
        int parentIndex = (index - 1) / 2;
        if (array[index].compareTo(array[parentIndex]) < 0) {
            swap(index, parentIndex);
            heapifyUp(parentIndex);
        }
    }

    public void swap(int index1, int index2) {
        T temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
    }

    public void sort() {
        int length = size;

        for (int i = length / 2 - 1; i >= 0; i--) {
            heapify(length, i);
        }

        for (int i = length - 1; i > 0; i--) {
            swap(0, i);
            heapify(i, 0);
        }
    }

    public void heapify(int length, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < length && array[left].compareTo(array[largest]) > 0) {
            largest = left;
        }

        if (right < length && array[right].compareTo(array[largest]) > 0) {
            largest = right;
        }

        if (largest != i) {
            swap(i, largest);
            heapify(length, largest);
        }
    }

    public void resize() {
        this.array = Arrays.copyOf(array, array.length * 2);
    }

    public T[] getArray() {
        return (T[]) array;
    }
}
