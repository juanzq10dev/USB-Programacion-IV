/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Multi.Threading.Merge.Sort;

public class Mergesort {

    public static<T extends Comparable<T>> void sort(T array[]) {
        sort(array, 0, array.length - 1);
    }

    private static<T extends Comparable<T>> void sort(T array[], int leftIndex, int rightIndex) {
        if (leftIndex < rightIndex) {
            int midIndex = leftIndex + (rightIndex - leftIndex) / 2;
            sort(array, leftIndex, midIndex);
            sort(array, midIndex + 1, rightIndex);
            merge(array, leftIndex, midIndex, rightIndex);
        }
    }

    private static<T extends Comparable<T>> void merge(T array[], int leftIndex, int midIndex, int rightIndex) {
        int length1 = midIndex - leftIndex + 1; 
        int length2 = rightIndex - midIndex; 

        T[] tempLeftArray = (T[]) new Comparable[length1];
        T[] tempRigthArray = (T[]) new Comparable[length2];

        for (int i = 0; i < length1; i++) {
            tempLeftArray[i] = array[leftIndex + i];
        }

        for (int j = 0; j < length2; j++) {
            tempRigthArray[j] = array[midIndex + 1 + j];
        }

        int i = 0;
        int j = 0;
        int k = leftIndex;

        while (i < length1 && j < length2) {
            if (tempLeftArray[i].compareTo(tempRigthArray[j]) <= 0) {
                array[k] = tempLeftArray[i];
                i++;
            } else {
                array[k] = tempRigthArray[j];
                j++;
            }
            k++;
        }

        while (i < length1) {
            array[k] = tempLeftArray[i];
            i++;
            k++;
        }

        while (j < length2) {
            array[k] = tempRigthArray[j];
            j++;
            k++;
        }
    }
}
